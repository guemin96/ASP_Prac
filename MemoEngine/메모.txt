1. Response 개체
- write() : 페이지에 문자열을 출력한다. HTML을 포함해 자바스크립트를 실행할 수도 있다.
- Redirect() : 지정된 페이지로 이동한다.
- Expires : 현재 페이지의 소멸 시간을 설정한다.
- Buffer : 버퍼링 사용 여부를 결정한다.
- Flush() : 현재 버퍼의 내용을 출력한다.
- Clear() : 현재 버퍼의 내용을 비운다.
- End() : 현재 페이지를 종료한다. End() 메서드 이후의 코드는 실행하지 않는다.
- WriteFile() : 스트림(파일)을 출력한다.
- Cookies[] : 쿠키를 저장한다.


2. Request 개체 
- QueryString[] : Get방식으로 넘어온 쿼리스트링 값인 key와 value를 받고자 할 때 사용한다.
- Form[] : Post 방식으로 넘어온 key와 value 값을 받고자 할 때 사용한다.
- Params : 사용자에게 전송된 Get/Post 방식을 모두 받고자 할 때 사용한다.
- UserHostAddress : 현재 접속자의 IP 주소 문자열을 반환한다.
- ServerVariables[] : 현재 접속자의 주요 서버 환경 변숫값을 알려 준다.
       EX)
       	ReQuest.UserHostAddress;
	Request.ServerVariables["REMOTE_HOST"]
	Request.ServerVariables["REMOTE_ADDR"]
	=> 다 같은 값이 나옴 , localhost, 127.0.0.1, ::1
- Cookies[] : 저장된 쿠키 값을 읽어 온다.
- Url : 현재 웹 페이지의 URL을 반환한다.
- PhysicalApplicationPath : 현재 웹사이트의 가상 디렉터리의 물리적인 경로를 알려준다.

* GET 전송일 때는 QueryString[]  / Post 전송일때는 Form[]


3. Server 개체 : 
서버에 있는 특정 페이지를 현재 페이지에 포함하거나 현재 페이지의 서버 측 경로 등을 웹페이지에
표시할 때 필요한 기능을 가지고 있다. 현재 페이지와 같은 경로를 얻거나 홈 디렉터리 경로등을 얻고자 할 때
사용되는 MapPath() 메서드가 가장 많이 사용된다.

- MapPath(".") : 현재 파일과 같은 경로 값 반환 ".","../"식으로 원하는 경로의 물리적 경로를 받아 올 수 있음
- Execute() : 다른 파일 포함(인클루드) 후 제어권 돌아옴
- Transfer() : 다른 파일 포함(인클루드) 후 제어권 넘김
- UrlPathEncode() : 넘어온 쿼리스트링을 유니코드로 변환(한글 처리)
- ScriptTimeout : 서버에서 현재 aspx 페이지를 몇 초간 처리할 건지 설정

4. Application 개체 :
응용 프로그램 영역에서 어떤 값을 저장시켜 놓은 뒤 그 값을 웹 페이지 어느 곳에서든 참조할 수 있는 기능이 있다.
그래서 응용 프로그램 레벨 변수로 주로 사용되고 Application["이름"]= 값; 형식으로 값을 저장한다.

- Lock() : 애플리케이션 변수를 잠그는 메서드
- UnLock() : 잠긴 애플리케이션 변수를 해제하는 메서드
- Add() : 애플리케이션 변수를 만들 때 사용
- Application_Start() : 웹 애플리케이션이 시작될 때 발생(웹 사이트에 첫 번째 사용자가 방문할 때 발생) => Global.asax에서 설정
- Application_End() : 웹 응용 프로그램이 끝날 때 발생(웹 사이트에서 마지막 사용자가 나간 후 발생) => Global.asac에서 설정

5. Session 개체 :
 단일 사용자 레벨로 어떤 값을 저장하거나 호출할 때 사용되는 개체로 사용자 한 명에 대한 정보를 키와 값으로 저장할 수 있으며
서버측 메모리에 해당 데이터를 저장한다. Application 변수가 누구나 접근 가능한 공통(Public)적인 성격이라면 Session 변수는
사용자별로 하나씩 생성되는 전용(Private)적인 성격. Session 개체는 사용자 한명이 웹 사이트를 방문했을 때 그 사용자에게만 
특정한 값을 저장해 놓고 유지하고 싶을 때 사용한다. 회원 로그인 기능을 구현할 때, 로그인했다라는 정보 등을 보관해 놓을 때, 주로 사용한다.

- SessionID : 현재 세션의 고유 번호 값 반환
- SessionTimeout : 세션 시간 기록 : 기본값 20분, 더 추가하거나 줄일 경우 사용
- Abandon : 현재 세션 지우기
- Session_Start() : 사용자(세션) 한 명이 방문할 때 실행
- Session_End() : 사용자(세션) 한 명이 나간 후 실행


* Application(public) VS Session(private)

6. Page 클래스 

- IsPostBack : 현재 페이지를 처음 로드했는지, 다시 게시(포스트백) 했는지 확인한다.
- ClientScript.RegisterClientScriptBlock() : 자바스크립트를 동적으로 웹페이지에 추가한다.
- Header :  현재 웹 폼의 <head> 태그 부분을 정의한다.
- Title : 현재 웹 폼의 제목을 동적으로 성정하거나 가져온다.
- SetFocus() : 다른 컨트롤의 ID 값을 지정해주면 웹 폼이 로드할 때 해당 컨트롤에 포커스가 지정된다.
  

* asp button 컨트롤은 누르기만 해도 Page_Load가 실행됨. 


7. 표준 컨트롤 

* 순수 Html 컨트롤로 구현할 경우 cs 단에서 사용할 수 없지만 runat = "server"를 넣어주면  input과 같은 html 컨트롤도 cs단에서 사용할 수 있다.
단 html 컨트롤의 경우 value속성으로 접근 가능하다.




